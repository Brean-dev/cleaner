name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
      inputs:
        tag:
          description: 'Tag for this build'
          required: true
          default: 'v0.1.0'

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      BINARY_NAME: cleaner

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # Cache everything first
      - name: Cache Cargo registry & index
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Cache Zig installation
        id: cache-zig
        uses: actions/cache@v4
        with:
          path: /opt/zig
          key: zig-0.10.0-linux-x86_64

      # Install dependencies in parallel where possible
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gcc-aarch64-linux-gnu musl-tools rpm

      # Only install Zig if not cached
      - name: Install Zig
        if: steps.cache-zig.outputs.cache-hit != 'true'
        run: |
          wget -q https://ziglang.org/download/0.10.0/zig-linux-x86_64-0.10.0.tar.xz
          tar -xf zig-linux-x86_64-0.10.0.tar.xz
          sudo mv zig-linux-x86_64-0.10.0 /opt/zig
          rm -rf zig-linux-x86_64-0.10.0.tar.xz

      - name: Setup Zig PATH
        run: sudo ln -sf /opt/zig/zig /usr/local/bin/zig

      # Cache cargo-zigbuild
      - name: Install cargo-zigbuild
        run: |
          if ! command -v cargo-zigbuild &> /dev/null; then
            cargo install cargo-zigbuild
          fi

      - name: Add build targets
        run: |
          rustup target add x86_64-unknown-linux-musl aarch64-unknown-linux-musl

      # Build both targets in one step
      - name: Build static binaries
        run: |
          cargo zigbuild --release --target x86_64-unknown-linux-musl --target aarch64-unknown-linux-musl

      # Combine packaging steps and run in parallel where possible
      - name: Prepare all packages
        run: |
          # Get version once
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ -n "${{ github.event.inputs.tag }}" ]]; then
            VERSION=${{ github.event.inputs.tag }}
            VERSION=${VERSION#v}  # Remove 'v' prefix if present
          else
            VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Get metadata once
          DESCRIPTION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].description')
          AUTHORS=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].authors[0]')
          REPOSITORY=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].repository')
          LICENSE=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].license')

          echo "DESCRIPTION=$DESCRIPTION" >> $GITHUB_ENV
          echo "AUTHORS=$AUTHORS" >> $GITHUB_ENV
          echo "REPOSITORY=$REPOSITORY" >> $GITHUB_ENV
          echo "LICENSE=$LICENSE" >> $GITHUB_ENV

          # Create all directories
          mkdir -p dist/{bin,deb/DEBIAN,deb/usr/bin,rpm}
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

          # Copy and prepare binaries
          cp target/x86_64-unknown-linux-musl/release/$BINARY_NAME dist/bin/$BINARY_NAME-x86_64-linux
          cp target/aarch64-unknown-linux-musl/release/$BINARY_NAME dist/bin/$BINARY_NAME-aarch64-linux
          cp target/x86_64-unknown-linux-musl/release/$BINARY_NAME dist/deb/usr/bin/
          chmod +x dist/bin/* dist/deb/usr/bin/*

      # Create packages in parallel using background processes
      - name: Create packages
        run: |
          # Create DEB package in background
          (
            cat > dist/deb/DEBIAN/control << EOF
          Package: ${BINARY_NAME}
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: ${AUTHORS} <noreply@github.com>
          Description: ${DESCRIPTION}
           ${DESCRIPTION}.
          EOF
            dpkg-deb --build dist/deb dist/${BINARY_NAME}_${VERSION}_amd64.deb
          ) &

          # Create RPM package in background
          (
            cat > ~/rpmbuild/SPECS/${BINARY_NAME}.spec << EOF
          Name:           ${BINARY_NAME}
          Version:        ${VERSION}
          Release:        1%{?dist}
          Summary:        ${DESCRIPTION}

          License:        ${LICENSE}
          URL:            ${REPOSITORY}
          Source0:        %{name}-%{version}.tar.gz

          %description
          ${DESCRIPTION}.

          %prep
          %build
          %install
          mkdir -p %{buildroot}/usr/bin
          cp $GITHUB_WORKSPACE/target/x86_64-unknown-linux-musl/release/${BINARY_NAME} %{buildroot}/usr/bin/

          %files
          /usr/bin/${BINARY_NAME}

          %changelog
          * $(date +'%a %b %d %Y') ${AUTHORS} <noreply@github.com> - ${VERSION}-1
          - Automated build from version ${VERSION}
          EOF
            rpmbuild -bb ~/rpmbuild/SPECS/${BINARY_NAME}.spec
            cp ~/rpmbuild/RPMS/x86_64/${BINARY_NAME}-${VERSION}-1.*.rpm dist/
          ) &

          # Wait for both background jobs to complete
          wait

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.deb
            dist/*.rpm
            dist/bin/*
          generate_release_notes: true
          draft: false
          prerelease: false
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
